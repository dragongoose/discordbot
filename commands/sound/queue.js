const { Client, MessageEmbed } = require("discord.js");
const paginator = require("../../utils/pageinator.js");
const savedQueue = require("../../schema/savedQueue.js");

module.exports = {
    name: "queue",
    description: "Shows current queue",
    aliases: ['q'],
    /**
     *
     * @param {Client} client
     * @param {Message} message
     * @param {String[]} args
     */
    run: async (client, msg, args) => {

        if(args[0] === "clear") {
            const queue = client.distube.getQueue(msg)
            queue.pause()
            queue.songs = []
            return msg.channel.send('Queue cleared!')
        }

        if(args[0] === "save") {
            const queue = client.distube.getQueue(msg)
            if (queue === undefined) return msg.channel.send('The queue is empty!')

            //get every song in the queue and put it into distube.createCustomPlaylist
            const songs = queue.songs
            const playlist = await client.distube.createCustomPlaylist(songs, {
                member: msg.member,
                properties: { 
                    name: `${msg.author.username}'s Queue`, 
                    description: 'Auto generated by discord bot.',
                },
                parallel: true
            })


            // used savedQueue schema to write to database
            const saved = new savedQueue({
                userId: msg.author.id,
                playlist: playlist
            })

            saved.save()
                .then(result => console.log(result))
                .catch(err => console.log(err))

            return msg.channel.send('Queue saved!')
        }

        if(args[0] === "load") {
            savedQueue.findOne({userId: msg.author.id})
                .then(async (result) => {
                    if(!result) return msg.channel.send('No saved queue found!')
                    console.log(result.playlist)
                        
                    let remadePlaylist = await client.distube.createCustomPlaylist(result.playlist.songs.map(x => x.url), {
                        member: msg.member,
                        properties: { 
                            name: `${msg.author.username}'s Queue`, 
                            description: 'Auto generated by discord bot.',
                        },
                    })

                    client.distube.play(msg, remadePlaylist)
                    return msg.channel.send('Queue loaded!')
                })
        }

        if(!args[0]) {

            var text = [];

            // Check if user is in vc
            if (!msg.member.voice.channel) return msg.channel.send('You must be in a voice channel.')
            
            let queue = client.distube.getQueue(msg);
            if (queue === undefined) text.push('No songs in queue!')
    
            
    
            function truncate(str, n) {
                return (str.length > n) ? str.substr(0, n - 1) + '..' : str;
            };
    
            if(queue.songs.length > 0){
                for (let i = 0; i < queue.songs.length; i++) {
                    var songname = truncate(queue.songs[i].name, 35)
                    text.push(`${i + 1}. ${songname} - ${queue.songs[i].formattedDuration}`) 
                }
            } else {
                text.push('No songs in queue!')
            }
    
            // Split array into chunks of 10
            const chunkSize = 10;
            var chunks = [];
            for (var i = 0; i < text.length; i += chunkSize) {
                chunks.push(text.slice(i, i + chunkSize));
            }
    
            let pages = [];
    
            // Loop through chunks
            for (let i = 0; i < chunks.length; i++) {
                let embed = new MessageEmbed()
                .setTitle('**Queue:**')
                    .setDescription(`\`\`\`sql\n${chunks[i].join("\n")}\`\`\``)
                    .setColor(0xD53C55) // Green: 0x00AE86
                    .setTimestamp();
                pages.push(embed)
            }
    
            paginator.main(pages, msg, 0)
        }
    }
};
